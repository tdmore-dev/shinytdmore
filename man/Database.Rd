% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/db.R
\name{Database}
\alias{Database}
\title{Database connection}
\description{
This R6 class provides an interface for `shinytdmore` to connect
to a database of patient information. This could be a simple
in-memory database, a file-based storage, or even an external database.
}
\section{Implementing a database}{

```
InMemoryDatabase <- R6Class("InMemoryDatabase", inherit=Database,
 private=list(storage=list()),
 public=list(
   get=function(id) storage[[id]],
   update=function(id,patient) {
     storage[[id]] <- patient
     invisible(self)
   },
   remove=function(id) {
     storage[[id]] <- NULL
     invisible(self)
   },
   add=function(patient) {
     private$storage <- c(private$storage, list(patient))
     patient$id <- length(storage)
   }
 ),
 active=list(
   patients=function(value) {
     if(missing(value)) private$storage
     else private$storage <- value
   }
 ))
```
}

\section{Methods}{

`$new()` creates a new database connection, connecting to the 
database and performing required sanity checks.

`$get(id)` retrieves a patient with the given `id` from the database

`$update(id, patient)` updates an existing patient with new information

`$remove(id)` removes a patient from the database

`$add(patient)` adds a patient to the database, and returns the patient with 
the `id` field filled in

`$patients` retrieves a list of all patients in the database
}

\section{JSON Database}{

For simplicity, one could also inherit the `JsonDatabase` R6Class instead. 
This class takes care of marshalling from/to JSON, making an implementation easier.
```
FileDatabase <- R6Class("FileDatabase", inherit=JsonDatabase,
   private=list(folder=list(),
   doGet=function(id) {
     fileName <- file.path(folder, sprintf('%s.json', id))
     readChar(fileName, file.info(fileName)$size)
   },
   doUpdate=function(id,patient) {
     fileName <- file.path(folder, sprintf('%s.json', id))
     writeChar(fileName, patient)
   },
   doRemove=function(id) {
     fileName <- file.path(folder, sprintf('%s.json', id))
     unlink(fileName)
   },
   doAdd=function(patient) {
     id <- floor(runif(n=1, max = .Machine$integer.max))
     fileName <- file.path(folder, sprintf('%s.json', id))
     if(file.exists(fileName)) return(doAdd(patient)) #try again
     doUpdate(id, patient)
     id
   },
   doGetPatients=function() {
     map( dir(folder), ~ readChar(.x, file.info(.x)$size) )
   }
 ),
 public=list(
   initialize=function(folder) {
     private$folder <- folder
     invisible(self)
   }
 )
)
```
}

\examples{
db <- InMemoryDatabase$new()
patient <- db$add(createFakePatient())
id <- patient$id

}
